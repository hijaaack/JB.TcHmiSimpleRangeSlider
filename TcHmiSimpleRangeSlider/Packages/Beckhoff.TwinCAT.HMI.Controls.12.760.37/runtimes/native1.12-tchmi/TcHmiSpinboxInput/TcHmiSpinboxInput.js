var TcHmi,__classPrivateFieldGet=this&&this.__classPrivateFieldGet||function(receiver,state,kind,f){if("a"===kind&&!f)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof state?receiver!==state||!f:!state.has(receiver))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===kind?f:"a"===kind?f.call(receiver):f?f.value:state.get(receiver)};!function(TcHmi){!function(Controls){!function(Beckhoff){var _a,_TcHmiSpinboxInput_tchmiFQN;class TcHmiSpinboxInput extends TcHmi.Controls.Beckhoff.TcHmiNumericInput{constructor(element,pcElement,attrs){super(element,pcElement,attrs),this.__isPressed=!1,this.__intervalTimer=0,this.__locked=!1,this.__onResolverForInputBackgroundColorWatchCallback=data=>{!1===this.__isAttached&&this.__suspendObjectResolver("inputBackgroundColor"),data.error===TcHmi.Errors.NONE?tchmi_equal(data.value,this.__inputBackgroundColor)||(this.__inputBackgroundColor=data.value,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"InputBackgroundColor"}),this.__processInputBackgroundColor()):TCHMI_CONSOLE_LOG_LEVEL>=1&&TcHmi.Log.errorEx("[Source=Control, Module="+this.__type+(__classPrivateFieldGet(TcHmiSpinboxInput,_a,"f",_TcHmiSpinboxInput_tchmiFQN)!==this.__type?", Origin="+__classPrivateFieldGet(TcHmiSpinboxInput,_a,"f",_TcHmiSpinboxInput_tchmiFQN):"")+", Id="+this.getId()+", Attribute=InputBackgroundColor] Resolving symbols from object failed with error: "+TcHmi.Log.buildMessage(data.details))},this.__evtHandlerMouseClickPlus=this.__onButtonPlus(),this.__evtHandlerMouseClickMinus=this.__onButtonMinus(),this.__evtHandlerMouseDownPlus=this.__onMouseDownButtonPlus(),this.__evtHandlerMouseDownMinus=this.__onMouseDownButtonMinus(),this.__evtHandlerDocumentMouseUp=this.__onMouseUp()}__previnit(){if(super.__previnit(),this.__elementButtonContainerStart=this.__elementTemplateRoot.getElementsByClassName("TcHmi_Controls_Beckhoff_TcHmiSpinboxInput-template-button-before")[0],this.__elementButtonContainerEnd=this.__elementTemplateRoot.getElementsByClassName("TcHmi_Controls_Beckhoff_TcHmiSpinboxInput-template-button-after")[0],!this.__elementButtonContainerStart||!this.__elementButtonContainerEnd)throw new Error("Invalid Template.html")}__init(){super.__init()}__attach(){super.__attach();const passiveEventOptions=!!TCHMI_EVENT_OPTION_OBJECT_SUPPORTED&&{passive:!0,capture:!1};this.__buttonPlus&&(this.__buttonPlus.addEventListener("click",this.__evtHandlerMouseClickPlus,passiveEventOptions),this.__buttonPlus.addEventListener("mousedown",this.__evtHandlerMouseDownPlus,passiveEventOptions)),this.__buttonMinus&&(this.__buttonMinus.addEventListener("click",this.__evtHandlerMouseClickMinus,passiveEventOptions),this.__buttonMinus.addEventListener("mousedown",this.__evtHandlerMouseDownMinus,passiveEventOptions))}__detach(){super.__detach(),this.__intervalTimer&&(clearInterval(this.__intervalTimer),this.__intervalTimer=0);const passiveEventOptions=!!TCHMI_EVENT_OPTION_OBJECT_SUPPORTED&&{passive:!0,capture:!1};this.__buttonPlus&&(this.__buttonPlus.removeEventListener("click",this.__evtHandlerMouseClickPlus,passiveEventOptions),this.__buttonPlus.removeEventListener("mousedown",this.__evtHandlerMouseDownPlus,passiveEventOptions)),this.__buttonMinus&&(this.__buttonMinus.removeEventListener("click",this.__evtHandlerMouseClickMinus,passiveEventOptions),this.__buttonMinus.removeEventListener("mousedown",this.__evtHandlerMouseDownMinus,passiveEventOptions))}destroy(){this.__keepAlive||super.destroy()}__createAndAppendButtons(){switch(this.__buttonPlus||(this.__buttonPlus=document.createElement("div"),this.__buttonPlus.classList.add("button","button-plus")),this.__buttonMinus||(this.__buttonMinus=document.createElement("div"),this.__buttonMinus.classList.add("button","button-minus")),this.__buttonPosition){case"BothLeft":this.__elementButtonContainerStart.append(this.__buttonPlus,this.__buttonMinus);break;case"PlusLeftAndMinusRight":case"PlusTopAndMinusBottom":this.__elementButtonContainerStart.append(this.__buttonPlus),this.__elementButtonContainerEnd.append(this.__buttonMinus);break;case"BothRight":this.__elementButtonContainerEnd.append(this.__buttonPlus,this.__buttonMinus);break;default:this.__elementButtonContainerStart.append(this.__buttonMinus),this.__elementButtonContainerEnd.append(this.__buttonPlus)}this.__elementTemplateRoot.classList.toggle("both-left","BothLeft"===this.__buttonPosition),this.__elementTemplateRoot.classList.toggle("plus-left-minus-right","PlusLeftAndMinusRight"===this.__buttonPosition),this.__elementTemplateRoot.classList.toggle("both-right","BothRight"===this.__buttonPosition),this.__elementTemplateRoot.classList.toggle("minus-left-plus-right","MinusLeftAndPlusRight"===this.__buttonPosition),this.__elementTemplateRoot.classList.toggle("plus-top-minus-bottom","PlusTopAndMinusBottom"===this.__buttonPosition),this.__elementTemplateRoot.classList.toggle("minus-top-plus-bottom","MinusTopAndPlusBottom"===this.__buttonPosition)}__executeStep(direction){let newValue;if(null!==this.__value&&void 0!==this.__value){if(Number(this.__elementInput.value)!==this.__value)return void this.__processValue();newValue="decrement"===direction?this.__value-(this.__step??1):this.__value+(this.__step??1),null!==this.__internalMaxValue&&void 0!==this.__internalMaxValue&&(newValue=newValue>this.__internalMaxValue?this.__internalMaxValue:newValue),null!==this.__internalMinValue&&void 0!==this.__internalMinValue&&(newValue=newValue<this.__internalMinValue?this.__internalMinValue:newValue)}else newValue=void 0!==this.__lastValidValue?this.__lastValidValue:null!==this.__internalMinValue&&void 0!==this.__internalMinValue?this.__internalMinValue:null!==this.__internalMaxValue&&void 0!==this.__internalMaxValue?this.__internalMaxValue:0;this.__userInput?this.__userInput.userData=newValue:this.__userInput={userData:newValue,originalData:this.__oldValue??0},this.__restoreUserInputOnLoad&&this.__storage?.set("userInput",this.__userInput),this.__setValue(newValue),TcHmi.EventProvider.raise(this.__id+".onUserInteractionFinished")}__onButtonPlus(){return()=>{this.__autoStep||this.__executeStep("increment")}}__onButtonMinus(){return()=>{this.__autoStep||this.__executeStep("decrement")}}__onMouseDownButtonPlus(){return()=>{this.__autoStep&&(this.__elementInput.blur(),this.__executeStep("increment"),this.__isPressed=!0,document.addEventListener("mouseup",this.__evtHandlerDocumentMouseUp,{passive:!0,once:!0}),this.__intervalTimer=setInterval((()=>{this.__isPressed&&this.__executeStep("increment")}),150))}}__onMouseDownButtonMinus(){return()=>{this.__autoStep&&(this.__elementInput.blur(),this.__executeStep("decrement"),this.__isPressed=!0,document.addEventListener("mouseup",this.__evtHandlerDocumentMouseUp,{passive:!0,once:!0}),this.__intervalTimer=setInterval((()=>{this.__isPressed&&this.__executeStep("decrement")}),150))}}__onMouseUp(){return evt=>{this.__isPressed=!1,this.__intervalTimer&&(clearInterval(this.__intervalTimer),this.__intervalTimer=0)}}setStep(valueNew){let convertedValue=TcHmi.ValueConverter.toNumber(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("Step")),convertedValue!==this.__step&&(this.__step=convertedValue,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"Step"}),this.__processStep())}getStep(){return this.__step}__processStep(){this.__processValue()}setButtonPosition(valueNew){let convertedValue=TcHmi.ValueConverter.toString(valueNew);if(null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("ButtonPosition")),convertedValue!==this.__buttonPosition){switch(convertedValue){case"BothLeft":case"BothRight":case"PlusLeftAndMinusRight":case"PlusTopAndMinusBottom":case"MinusTopAndPlusBottom":this.__buttonPosition=convertedValue;break;default:this.__buttonPosition="MinusLeftAndPlusRight"}TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"ButtonPosition"}),this.__processButtonPosition()}}getButtonPosition(){return this.__buttonPosition}__processButtonPosition(){this.__createAndAppendButtons()}setInputBackgroundColor(valueNew){let convertedValue=TcHmi.ValueConverter.toObject(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("InputBackgroundColor"));let resolverInfo=this.__objectResolvers.get("inputBackgroundColor");resolverInfo&&(resolverInfo.watchDestroyer&&resolverInfo.watchDestroyer(),resolverInfo.resolver.destroy());let resolver=new TcHmi.Symbol.ObjectResolver(convertedValue,this);this.__objectResolvers.set("inputBackgroundColor",{resolver:resolver,watchCallback:this.__onResolverForInputBackgroundColorWatchCallback,watchDestroyer:resolver.watch(this.__onResolverForInputBackgroundColorWatchCallback)})}getInputBackgroundColor(){return this.__inputBackgroundColor}__processInputBackgroundColor(){TcHmi.StyleProvider.processBackgroundColor(this.__elementInput,this.__inputBackgroundColor)}setAutoStep(valueNew){let convertedValue=TcHmi.ValueConverter.toBoolean(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("AutoStep")),convertedValue!==this.__autoStep&&(this.__autoStep=convertedValue,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"AutoStep"}),this.__processAutoStep())}getAutoStep(){return this.__autoStep}__processAutoStep(){}}_TcHmiSpinboxInput_tchmiFQN={value:"TcHmi.Controls.Beckhoff."+(_a=TcHmiSpinboxInput).name},Beckhoff.TcHmiSpinboxInput=TcHmiSpinboxInput}(Controls.Beckhoff||(Controls.Beckhoff={}))}(TcHmi.Controls||(TcHmi.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.Controls.registerEx("TcHmiSpinboxInput","TcHmi.Controls.Beckhoff",TcHmi.Controls.Beckhoff.TcHmiSpinboxInput);