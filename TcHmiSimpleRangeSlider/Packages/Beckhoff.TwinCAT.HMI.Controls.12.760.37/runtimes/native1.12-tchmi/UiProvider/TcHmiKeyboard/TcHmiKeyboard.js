var TcHmi;!function(TcHmi){!function(Controls){!function(UiProvider){!function(Keyboard){class TcHmiKeyboard extends TcHmi.UiProvider.KeyboardProvider{constructor(){super(TcHmiKeyboard.providerName),this.__localeChangedRegistered=!1,this.__deviceHasOSK=!1,this.__closeViaApi=event=>{this.__activeTextElement&&("resize"===event?.type&&event.target===window.visualViewport&&(this.__deviceHasOSK=!0),"geometrychange"===event?.type&&"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&event.target===navigator.virtualKeyboard&&"overlaysContent"in navigator.virtualKeyboard&&"boolean"==typeof navigator.virtualKeyboard.overlaysContent&&(navigator.virtualKeyboard.overlaysContent=!1,this.__deviceHasOSK=!0),TcHmi.Keyboard.close())}}refreshConfig(){this.__activeTextElement&&this.__popup?.isShowing()&&this.open(this.__activeTextElement)}open(textElement){const tchmiconfig=TcHmi.Config.get();if(!tchmiconfig.systemKeyboard?.providerName)return this.close(),{code:TcHmi.Errors.E_INVALID};if(this.__deviceHasOSK)return{code:TcHmi.Errors.E_NOT_ALLOWED};"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&"addEventListener"in navigator.virtualKeyboard&&"function"==typeof navigator.virtualKeyboard.addEventListener&&"overlaysContent"in navigator.virtualKeyboard&&"boolean"==typeof navigator.virtualKeyboard.overlaysContent?(navigator.virtualKeyboard.addEventListener("geometrychange",this.__closeViaApi),navigator.virtualKeyboard.overlaysContent=!0):window.visualViewport&&(window.visualViewport.addEventListener("resize",this.__closeViaApi),setTimeout((()=>{window.visualViewport?.removeEventListener("resize",this.__closeViaApi)}),400));let configuredInputModeMapping,configuredNoregionInputModeMapping,fallbackLanguageInputModeMapping,requestedInputMode="text";if(textElement.hasAttribute("data-tchmi-input-mode")?requestedInputMode=textElement.getAttribute("data-tchmi-input-mode"):"numeric"===textElement.getAttribute("inputmode")?requestedInputMode="numeric":("decimal"===textElement.getAttribute("inputmode")||"number"===textElement.type)&&(requestedInputMode="decimal"),"skip"===requestedInputMode)return{code:TcHmi.Errors.E_INVALID};if("none"===requestedInputMode)return TcHmi.Keyboard.close(),{code:TcHmi.Errors.E_INVALID};const locale=(TcHmi.Locale.get()??"en").toLowerCase(),fallbackLocale=(tchmiconfig.languageFallback??"en").toLowerCase();for(const[localeMixedCase,setting]of Object.entries(tchmiconfig.systemKeyboard?.projectKeyboardMapping??{})){const configLocale=localeMixedCase.toLowerCase();configLocale!==locale||configuredInputModeMapping||(configuredInputModeMapping=setting),configLocale.split("-")[0]!==fallbackLocale.split("-")[0]||fallbackLanguageInputModeMapping||(fallbackLanguageInputModeMapping=setting),configuredNoregionInputModeMapping||(configLocale.split("-")[0]===locale.split("-")[0]||configLocale.split("-")[0]===fallbackLocale.split("-")[0])&&(configuredNoregionInputModeMapping=setting)}let keyboardUrl=configuredInputModeMapping?.[requestedInputMode]||configuredNoregionInputModeMapping?.[requestedInputMode]||fallbackLanguageInputModeMapping?.[requestedInputMode]||("numeric"===requestedInputMode?configuredInputModeMapping?.decimal||configuredNoregionInputModeMapping?.decimal||fallbackLanguageInputModeMapping?.decimal:void 0)||configuredInputModeMapping?.text||configuredNoregionInputModeMapping?.text||fallbackLanguageInputModeMapping?.text;if(!keyboardUrl)return TCHMI_CONSOLE_LOG_LEVEL>=1&&TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not find a configured keyboard file for requested input mode '"+requestedInputMode+"' for current locale '"+locale+"' and fallback locale '"+fallbackLocale+"'. Aborting."),{code:TcHmi.Errors.E_PARAMETER_INVALID};if(!tchmiconfig.keyboardLayouts.some((projectLayoutFile=>projectLayoutFile.url===keyboardUrl)))return TCHMI_CONSOLE_LOG_LEVEL>=1&&TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Needed keyboard file '"+keyboardUrl+"' (configured in tchmiconfig.json for current locale '"+locale+"' and fallback locale '"+fallbackLocale+"') is not avaible. Aborting."),{code:TcHmi.Errors.E_PARAMETER_INVALID};if(textElement!==this.__activeTextElement&&(this.__mutationObserver?.disconnect(),this.__mutationObserver=void 0,this.__mutationObserver=new MutationObserver((mutationList=>{let keyboardConfigChanged=!1;for(const mutation of mutationList)if("attributes"===mutation.type&&("inputmode"===mutation.attributeName||"data-tchmi-input-mode"===mutation.attributeName||"type"===mutation.attributeName)){keyboardConfigChanged=!0;break}keyboardConfigChanged&&this.__activeTextElement&&this.open(this.__activeTextElement)})),this.__mutationObserver.observe(textElement,{attributes:!0})),this.__localeChangedRegistered||(this.__localeChangedRegistered=!0,TcHmi.EventProvider.register("onLocaleChanged",(()=>{this.__activeTextElement&&this.open(this.__activeTextElement)}))),this.__activeTextElement=textElement,this.__keyboardCtrl)this.__keyboardCtrl.setLayoutFile(keyboardUrl);else{if(this.__keyboardCtrl=TcHmi.ControlFactory.createEx(TcHmiKeyboard.keyboardClassFqn,"tchmi-system-keyboard",{"data-tchmi-layout-file":keyboardUrl,"data-tchmi-left":"0","data-tchmi-top":"0","data-tchmi-width-mode":"Content"}),!this.__keyboardCtrl)return TCHMI_CONSOLE_LOG_LEVEL>=1&&TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not compile keyboard with class",TcHmiKeyboard.keyboardClassFqn,". Aborting."),{code:TcHmi.Errors.ERROR};this.__keyboardCtrl.getElement()[0].style.overflow="visible"}const configuredHeight=tchmiconfig.systemKeyboard.layout?.height;if(configuredHeight?(this.__keyboardCtrl.setHeight(configuredHeight),this.__keyboardCtrl.setHeightMode("Value"),this.__keyboardCtrl.setScaleMode("ScaleToFitHeight")):(this.__keyboardCtrl.setHeight(null),this.__keyboardCtrl.setHeightMode("Content"),this.__keyboardCtrl.setScaleMode("None")),!this.__popup){const popupProvider=TcHmi.UiProvider.getPreferredProvider("popup");if(!popupProvider)return TCHMI_CONSOLE_LOG_LEVEL>=1&&TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not open keyboard with popup provider. Aborting."),{code:TcHmi.Errors.ERROR};this.__popup=popupProvider.createHtmlElementBox("",this.__keyboardCtrl.getElement()[0],{},null),this.__popup.setPositioningMode(TcHmi.UiProvider.PopupProvider.PositioningMode.Floating),this.__popup.setBounds({left:50,top:50}),this.__popup.setBackgroundMode(TcHmi.UiProvider.PopupProvider.BackgroundMode.None),this.__popup.setMovable(!0),this.__popup.setStorageSettings({name:"TcHmi.Controls.UiProvider.Keyboard.TcHmiKeyboard",restoreBounds:!0}),this.__popup.setCloseButton(!0),this.__popup.onHide.add(this.__closeViaApi)}return this.__popup.show(),{code:TcHmi.Errors.NONE}}close(){const wasActive=!!this.__activeTextElement;return this.__activeTextElement=void 0,this.__mutationObserver?.disconnect(),this.__mutationObserver=void 0,"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&"removeEventListener"in navigator.virtualKeyboard&&"function"==typeof navigator.virtualKeyboard.removeEventListener&&navigator.virtualKeyboard.removeEventListener("geometrychange",this.__closeViaApi),window.visualViewport?.removeEventListener("resize",this.__closeViaApi),this.__popup?.hide(),{code:wasActive?TcHmi.Errors.NONE:TcHmi.Errors.E_INVALID}}}TcHmiKeyboard.providerName="Beckhoff.TcHmiKeyboard",TcHmiKeyboard.keyboardClassFqn="TcHmi.Controls.Beckhoff.TcHmiKeyboard",Keyboard.TcHmiKeyboard=TcHmiKeyboard}(UiProvider.Keyboard||(UiProvider.Keyboard={}))}(Controls.UiProvider||(Controls.UiProvider={}))}(TcHmi.Controls||(TcHmi.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.UiProvider.register(new TcHmi.Controls.UiProvider.Keyboard.TcHmiKeyboard);